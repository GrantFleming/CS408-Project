type: α
  value: a

type: β
  value: b

type: A -> B
  if:
    type A
    type B
  eliminated-by: E
    if:
      (A) <- E
    resulting-in-type: B
  value: \ X. -> M
    if:
      X : (A) |- (B) <- M
    reduces-to: M/[, E:A]
  expanded-by: \ Y. -> Y

type: ∀ T. => M
  if:
    T : (set) |- type M
  eliminated-by: TY
    if:
      type TY
    resulting-in-type: M/[, TY:set]
  value: δ T. TM
    if:
      T : (set) |- (M/[, .T]) <- TM
    reduces-to: TM/[, TY:set]


