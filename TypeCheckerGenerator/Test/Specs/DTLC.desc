type: Î±
  value: a1
  value: a2

type: isa TY TM
  if:
    type TY
    (TY) <- TM
  value: is V
    if:
      (TY) <- V
      (TM) = V

type: A X. -> B
  if:
    type A
    X : (A) |- type B
  eliminator: E
    if:
      (A) <- E
    elimination-type: B/[, E:A]
  value: \ X. -> M
    if:
      X : (A) |- (B/[, .X]) <- M
    reduction: M/[, E:A]
  eta: \ Y. -> Y
