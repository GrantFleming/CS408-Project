type: α
  value: a

type: β
  value: b

type: A -> B
  if:
    type A
    type B
  eliminated-by: E
    if:
      (A) <- E
    resulting-in-type: B
  value: \ X. -> M
    if:
      X : (A) |- (B) <- M
    reduces-to: M/[, E:A]
  expanded-by: \ Y. -> Y
  
type: A x B
  if:
    type A
    type B
  eliminated-by: fst
    resulting-in-type: A
  eliminated-by: snd
    resulting-in-type: B
  value: L and R
    if:
      (A) <- L
      (B) <- R
    reduces-to: L
    reduces-to: R
  expanded-by: fst , snd